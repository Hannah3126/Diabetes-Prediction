{"trial_id": "01", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "filters_1", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "kernel_size_1", "default": 2, "conditions": [], "values": [2, 3, 5], "ordered": true}}, {"class_name": "Int", "config": {"name": "filters_2", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "kernel_size_2", "default": 2, "conditions": [], "values": [2, 3, 5], "ordered": true}}, {"class_name": "Int", "config": {"name": "filters_3", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "kernel_size_3", "default": 2, "conditions": [], "values": [2, 3], "ordered": true}}, {"class_name": "Int", "config": {"name": "dense_units_1", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "l2_regularization_1", "default": 1e-05, "conditions": [], "min_value": 1e-05, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Float", "config": {"name": "dropout_1", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.6, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense_units_2", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "l2_regularization_2", "default": 1e-05, "conditions": [], "min_value": 1e-05, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Float", "config": {"name": "dropout_2", "default": 0.2, "conditions": [], "min_value": 0.2, "max_value": 0.6, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.0001, "conditions": [], "values": [0.0001, 0.0005, 0.001], "ordered": true}}], "values": {"filters_1": 224, "kernel_size_1": 3, "filters_2": 64, "kernel_size_2": 3, "filters_3": 96, "kernel_size_3": 3, "dense_units_1": 64, "l2_regularization_1": 0.004947237309544887, "dropout_1": 0.4, "dense_units_2": 32, "l2_regularization_2": 0.0004771685450163331, "dropout_2": 0.2, "learning_rate": 0.0001}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Users/hannahjoshua/Desktop/ODL_CODE/env/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\nValueError: Exception encountered when calling MaxPooling1D.call().\n\n\u001b[1mNegative dimension size caused by subtracting 2 from 1 for '{{node sequential_1/max_pooling1d_2_1/MaxPool1d}} = MaxPool[T=DT_FLOAT, data_format=\"NHWC\", explicit_paddings=[], ksize=[1, 1, 2, 1], padding=\"VALID\", strides=[1, 1, 2, 1]](sequential_1/max_pooling1d_2_1/MaxPool1d/ExpandDims)' with input shapes: [32,1,1,96].\u001b[0m\n\nArguments received by MaxPooling1D.call():\n  \u2022 inputs=tf.Tensor(shape=(32, 1, 96), dtype=float32)\n"}